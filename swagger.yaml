---
swagger: '2.0'
info:
  description: 'API documentation for the SwiftWise Inventory Management System.'
  version: '1.0.0'
  title: 'SwiftWise API'
  termsOfService: 'http://swiftwise.com/terms/'
  contact:
    email: 'support@swiftwise.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'z0a6v7mgd2.execute-api.us-west-2.amazonaws.com'
basePath: '/dev'
tags:
- name: 'auth'
  description: 'Endpoints for user authentication and authorization'
- name: 'user'
  description: 'Endpoints for managing user profiles'
schemes:
- 'https'
- 'http'
paths:
  /auth/register:
    post:
      tags:
      - 'auth'
      summary: 'Register a new user'
      description: 'Creates a new user account in the SwiftWise system.'
      operationId: 'registerUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User registration details'
        required: true
        schema:
          type: 'object'
          properties:
            username:
              type: 'string'
            password:
              type: 'string'
            email:
              type: 'string'
            phone_number:
              type: 'string'
          example:
            username: 'john_doe'
            password: 'Password123!'
            email: 'john@example.com'
            phone_number: '+1234567890'
      responses:
        201:
          description: 'User registered successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User registered successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'
  /auth/confirm-email:
    post:
      tags:
      - 'auth'
      summary: 'Confirm email verification'
      description: 'Verifies a user email using the confirmation code sent during registration.'
      operationId: 'confirmEmail'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email confirmation details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            confirmationCode:
              type: 'string'
          example:
            email: 'john@example.com'
            confirmationCode: '123456'
      responses:
        200:
          description: 'Email confirmed successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Email successfully verified'
        400:
          description: 'Invalid confirmation code'
        500:
          description: 'Internal server error'
  /auth/resend-code:
    post:
      tags:
      - 'auth'
      summary: 'Resend confirmation code'
      description: 'Resends a new confirmation code to the user email.'
      operationId: 'resendConfirmationCode'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User email to resend the confirmation code'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
          example:
            email: 'john@example.com'
      responses:
        200:
          description: 'Confirmation code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Confirmation code sent successfully'
        400:
          description: 'Invalid email'
        500:
          description: 'Internal server error'
  /auth/forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Forgot password'
      description: 'Sends a password reset code to the user email.'
      operationId: 'forgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to initiate the password reset process'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
          example:
            email: 'john@example.com'
      responses:
        200:
          description: 'Password reset code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset code sent successfully'
        400:
          description: 'Invalid email'
        500:
          description: 'Internal server error'
  /auth/confirm-forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Confirm password reset'
      description: 'Confirms the password reset using the reset code.'
      operationId: 'confirmForgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Password reset confirmation details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            password:
              type: 'string'
            confirmationCode:
              type: 'string'
          example:
            email: 'john@example.com'
            password: 'NewPassword123!'
            confirmationCode: '654321'
      responses:
        200:
          description: 'Password reset successful'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset successful'
        400:
          description: 'Invalid confirmation code or email'
        500:
          description: 'Internal server error'
  /auth/login:
    post:
      tags:
      - 'auth'
      summary: 'User login'
      description: 'Authenticates a user and returns access, ID, and refresh tokens.'
      operationId: 'loginUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User login details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            password:
              type: 'string'
          example:
            email: 'john@example.com'
            password: 'Password123!'
      responses:
        200:
          description: 'Login successful'
          schema:
            type: 'object'
            properties:
              token:
                type: 'string'
              refreshToken:
                type: 'string'
            example:
              token: 'eyJraWQiOiJ...'
              refreshToken: 'eyJraWQiOiJ...'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /auth/logout:
    post:
      tags:
      - 'auth'
      summary: 'Logout user'
      description: 'Logs out an authenticated user by invalidating their session.'
      operationId: 'logoutUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to invalidate the session.'
        required: true
        type: 'string'
        example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User logged out successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User logged out successfully'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /user/{userId}:
  get:
    tags:
    - 'user'
    summary: 'Get user profile'
    description: 'Retrieves the profile details of the authenticated user.'
    operationId: 'getUserProfile'
    produces:
    - 'application/json'
    parameters:
    - name: 'Authorization'
      in: 'header'
      description: 'Bearer token to authenticate the request.'
      required: true
      type: 'string'
      example: 'Bearer eyJraWQiOiJ...'
    - name: 'userId'
      in: 'path'
      description: 'Unique identifier for the user.'
      required: true
      type: 'string'
      example: 'user123'
    responses:
      200:
        description: 'User profile retrieved successfully'
        schema:
          $ref: '#/definitions/UserProfile'
      400:
        description: 'Invalid or missing userId'
      401:
        description: 'Unauthorized'
      404:
        description: 'User not found'
      500:
        description: 'Internal server error'

  put:
    tags:
    - 'user'
    summary: 'Update user profile'
    description: 'Allows authenticated users to update their profile details.'
    operationId: 'updateUserProfile'
    consumes:
    - 'application/json'
    produces:
    - 'application/json'
    parameters:
    - name: 'Authorization'
      in: 'header'
      description: 'Bearer token to authenticate the request.'
      required: true
      type: 'string'
      example: 'Bearer eyJraWQiOiJ...'
    - name: 'userId'
      in: 'path'
      description: 'Unique identifier for the user.'
      required: true
      type: 'string'
      example: 'user123'
    - in: 'body'
      name: 'body'
      description: 'Profile attributes to update as key-value pairs'
      required: true
      schema:
        type: 'object'
        properties:
          email:
            type: 'string'
          phone_number:
            type: 'string'
        example:
          email: 'jane.doe@example.com'
          phone_number: '+1234567890'
    responses:
      200:
        description: 'Profile updated successfully'
        schema:
          type: 'object'
          properties:
            success:
              type: 'boolean'
              example: true
            message:
              type: 'string'
              example: 'Profile updated successfully'
        400:
          description: 'Invalid request data'
        401:
          description: 'Unauthorized'
        404:
          description: 'User not found'
        500:
          description: 'Internal server error'

definitions:
  UserProfile:
    type: 'object'
    properties:
      id:
        type: 'string'
      username:
        type: 'string'
      email:
        type: 'string'
      phone_number:
        type: 'string'
    example:
      id: 'user123'
      username: 'john_doe'
      email: 'john@example.com'
      phone_number: '+1234567890'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
