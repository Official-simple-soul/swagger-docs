---
swagger: '2.0'
info:
  description: 'API documentation for the SwiftWise Inventory Management System.'
  version: '1.0.0'
  title: 'SwiftWise API'
  termsOfService: 'http://swiftwise.com/terms/'
  contact:
    email: 'support@swiftwise.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'z0a6v7mgd2.execute-api.us-west-2.amazonaws.com'
basePath: '/dev'
tags:
- name: 'auth'
  description: 'Endpoints for user authentication and authorization'
- name: 'user'
  description: 'Endpoints for managing user profiles'
- name: 'product'
  description: 'Endpoints for managing products in the inventory system'
- name: 'category'
  description: 'Endpoints for managing product categories'
- name: 'unit'
  description: 'Endpoints for managing units of measurement for products'
- name: 'sales'
  description: 'Endpoints for managing sales and sales items'
schemes:
- 'https'
paths:
  /auth/register:
    post:
      tags:
      - 'auth'
      summary: 'Register a new user'
      description: 'Creates a new user account in the SwiftWise system.'
      operationId: 'registerUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User registration details'
        required: true
        schema:
          type: 'object'
          required:
          - username
          - password
          - email
          properties:
            username:
              type: 'string'
              example: 'john_doe'
            password:
              type: 'string'
              example: 'Password123!'
            email:
              type: 'string'
              example: 'john@example.com'
            phone_number:
              type: 'string'
              example: '+1234567890'
      responses:
        201:
          description: 'User registered successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User registered successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /auth/confirm-email:
    post:
      tags:
      - 'auth'
      summary: 'Confirm email verification'
      description: 'Verifies a user email using the confirmation code sent during registration.'
      operationId: 'confirmEmail'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email confirmation details'
        required: true
        schema:
          type: 'object'
          required:
          - email
          - confirmationCode
          properties:
            email:
              type: 'string'
              example: 'john@example.com'
            confirmationCode:
              type: 'string'
              example: '123456'
      responses:
        200:
          description: 'Email confirmed successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Email successfully verified'
        400:
          description: 'Invalid confirmation code'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid confirmation code'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
  /auth/resend-code:
    post:
      tags:
      - 'auth'
      summary: 'Resend confirmation code'
      description: 'Resends a new confirmation code to the user email.'
      operationId: 'resendConfirmationCode'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User email to resend the confirmation code'
        required: true
        schema:
          type: 'object'
          required:
          - email
          properties:
            email:
              type: 'string'
              example: 'john@example.com'
      responses:
        200:
          description: 'Confirmation code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Confirmation code sent successfully'
        400:
          description: 'Invalid email'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid email provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /auth/forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Forgot password'
      description: 'Sends a password reset code to the user email.'
      operationId: 'forgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to initiate the password reset process'
        required: true
        schema:
          type: 'object'
          required:
          - email
          properties:
            email:
              type: 'string'
              example: 'john@example.com'
      responses:
        200:
          description: 'Password reset code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset code sent successfully'
        400:
          description: 'Invalid email'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid email provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /auth/confirm-forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Confirm password reset'
      description: 'Confirms the password reset using the reset code.'
      operationId: 'confirmForgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Password reset confirmation details'
        required: true
        schema:
          type: 'object'
          required:
          - email
          - password
          - confirmationCode
          properties:
            email:
              type: 'string'
              example: 'john@example.com'
            password:
              type: 'string'
              example: 'NewPassword123!'
            confirmationCode:
              type: 'string'
              example: '654321'
      responses:
        200:
          description: 'Password reset successful'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset successful'
        400:
          description: 'Invalid confirmation code or email'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid confirmation code or email'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /auth/login:
    post:
      tags:
      - 'auth'
      summary: 'User login'
      description: 'Authenticates a user and returns access, ID, and refresh tokens.'
      operationId: 'loginUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User login details'
        required: true
        schema:
          type: 'object'
          required:
          - email
          - password
          properties:
            email:
              type: 'string'
              example: 'john@example.com'
            password:
              type: 'string'
              example: 'Password123!'
      responses:
        200:
          description: 'Login successful'
          schema:
            type: 'object'
            properties:
              token:
                type: 'string'
                example: 'eyJraWQiOiJ...'
              refreshToken:
                type: 'string'
                example: 'eyJraWQiOiJ...'
        401:
          description: 'Unauthorized'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Unauthorized access'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /auth/logout:
    post:
      tags:
      - 'auth'
      summary: 'Logout user'
      description: 'Logs out an authenticated user by invalidating their session.'
      operationId: 'logoutUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to invalidate the session.'
        required: true
        type: 'string'
        example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User logged out successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User logged out successfully'
        401:
          description: 'Unauthorized'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Unauthorized access'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
  /user:
    get:
      tags:
      - 'user'
      summary: 'Get user profile'
      description: 'Retrieves the profile details of the authenticated user.'
      operationId: 'getUserProfile'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to authenticate the request.'
        required: true
        schema:
          type: 'string'
          example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User profile retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/definitions/UserProfile'
        400:
          description: 'Invalid or missing userId'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Invalid or missing userId'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Unauthorized access'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'User not found'
        500:
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Internal server error occurred'

    put:
      tags:
      - 'user'
      summary: 'Update user profile'
      description: 'Allows authenticated users to update their profile details.'
      operationId: 'updateUserProfile'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to authenticate the request.'
        required: true
        schema:
          type: 'string'
          example: 'Bearer eyJraWQiOiJ...'
      - in: 'body'
        name: 'body'
        description: 'Profile attributes to update as key-value pairs'
        required: true
        schema:
          type: 'object'
          properties:
            preferred_username:
              type: 'string'
            email:
              type: 'string'
            email_verified:
              type: 'boolean'
            phone_number:
              type: 'string'
            phone_number_verified:
              type: 'boolean'
            family_name:
              type: 'string'
            given_name:
              type: 'string'
            nickname:
              type: 'string'
            gender:
              type: 'string'
            birthdate:
              type: 'string'
            address:
              type: 'string'
            locale:
              type: 'string'
            picture:
              type: 'string'
          example:
            preferred_username: 'johndoe'
            email: 'jane.doe@example.com'
            email_verified: true
            phone_number: '+1234567890'
            phone_number_verified: false
            family_name: 'Doe'
            given_name: 'Jane'
            nickname: 'Janey'
            gender: 'Female'
            birthdate: '1990-01-01'
            address: '123 Main St, Springfield'
            locale: 'en-US'
            picture: 'https://example.com/picture.jpg'
      responses:
        200:
          description: 'Profile updated successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Profile updated successfully'
        400:
          description: 'Invalid request data'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Invalid request data provided'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Unauthorized access'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'User not found'
        500:
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: false
                  message:
                    type: 'string'
                    example: 'Internal server error occurred'
  /product:
    post:
      tags:
      - 'product'
      summary: 'Create a new product'
      description: 'Adds a new product to the inventory system.'
      operationId: 'createProduct'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Product details to create a new product'
        required: true
        schema:
          type: 'object'
          required:
          - product_name
          - product_description
          - product_main_price
          - product_quantity
          - category_id
          - unit_id
          - product_status
          - track_inventory
          - product_slug
          - product_barcode
          - product_purchase_cost
          - product_available
          - variant_id
          properties:
            product_main_price:
              type: 'number'
              format: 'float'
              example: 199.99
            category_id:
              type: 'string'
              example: 'cat_wearable'
            product_quantity:
              type: 'integer'
              example: 30
            product_status:
              type: 'string'
              enum: [ 'active', 'inactive' ]
              example: 'active'
            product_name:
              type: 'string'
              example: 'Smartwatch Pro'
            track_inventory:
              type: 'boolean'
              example: true
            product_slug:
              type: 'string'
              example: 'smartwatch-pro'
            other:
              type: 'object'
              properties:
                color:
                  type: 'string'
                  example: 'silver'
                water_resistant:
                  type: 'string'
                  example: 'Yes'
                brand:
                  type: 'string'
                  example: 'WearTech'
            cover_url:
              type: 'string'
              example: 'https://example.com/images/smartwatch.jpg'
            product_barcode:
              type: 'string'
              example: '9876543210987'
            product_purchase_cost:
              type: 'number'
              format: 'float'
              example: 120
            product_available:
              type: 'integer'
              example: 28
            unit_id:
              type: 'string'
              example: 'unit_002'
            product_description:
              type: 'string'
              example: 'Advanced smartwatch with fitness tracking and heart rate monitoring.'
            variant_id:
              type: 'string'
              example: 'var_002'
      responses:
        201:
          description: 'Product created successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product created successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
    get:
      tags:
      - 'product'
      summary: 'Get a list of all products'
      description: 'Retrieves a list of all products in the inventory.'
      operationId: 'getProducts'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of products retrieved successfully'
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                id:
                  type: 'string'
                  example: 'product123'
                product_main_price:
                  type: 'number'
                  format: 'float'
                  example: 199.99
                category_id:
                  type: 'string'
                  example: 'cat_wearable'
                product_quantity:
                  type: 'integer'
                  example: 30
                product_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
                  example: 'active'
                product_name:
                  type: 'string'
                  example: 'Smartwatch Pro'
                track_inventory:
                  type: 'boolean'
                  example: true
                product_slug:
                  type: 'string'
                  example: 'smartwatch-pro'
                other:
                  type: 'object'
                  properties:
                    color:
                      type: 'string'
                      example: 'silver'
                    water_resistant:
                      type: 'string'
                      example: 'Yes'
                    brand:
                      type: 'string'
                      example: 'WearTech'
                cover_url:
                  type: 'string'
                  example: 'https://example.com/images/smartwatch.jpg'
                product_barcode:
                  type: 'string'
                  example: '9876543210987'
                product_purchase_cost:
                  type: 'number'
                  format: 'float'
                  example: 120
                product_available:
                  type: 'integer'
                  example: 28
                unit_id:
                  type: 'string'
                  example: 'unit_002'
                product_description:
                  type: 'string'
                  example: 'Advanced smartwatch with fitness tracking and heart rate monitoring.'
                variant_id:
                  type: 'string'
                  example: 'var_002'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
  /product/{id}:
    get:
      tags:
      - 'product'
      summary: 'Get a product by ID'
      description: 'Retrieves the details of a single product by its ID.'
      operationId: 'getProductById'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the product to retrieve'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Product details retrieved successfully'
          schema:
            type: 'object'
            properties:
              product_main_price:
                type: 'number'
                format: 'float'
                example: 199.99
              category_id:
                type: 'string'
                example: 'cat_wearable'
              product_quantity:
                type: 'integer'
                example: 30
              product_status:
                type: 'string'
                enum: [ 'active', 'inactive' ]
                example: 'active'
              product_name:
                type: 'string'
                example: 'Smartwatch Pro'
              track_inventory:
                type: 'boolean'
                example: true
              product_slug:
                type: 'string'
                example: 'smartwatch-pro'
              other:
                type: 'object'
                properties:
                  color:
                    type: 'string'
                    example: 'silver'
                  water_resistant:
                    type: 'string'
                    example: 'Yes'
                  brand:
                    type: 'string'
                    example: 'WearTech'
              cover_url:
                type: 'string'
                example: 'https://example.com/images/smartwatch.jpg'
              product_barcode:
                type: 'string'
                example: '9876543210987'
              product_purchase_cost:
                type: 'number'
                format: 'float'
                example: 120
              product_available:
                type: 'integer'
                example: 28
              unit_id:
                type: 'string'
                example: 'unit_002'
              product_description:
                type: 'string'
                example: 'Advanced smartwatch with fitness tracking and heart rate monitoring.'
              variant_id:
                type: 'string'
                example: 'var_002'
        404:
          description: 'Product not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Product not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
    put:
      tags:
      - 'product'
      summary: 'Update an existing product'
      description: 'Allows modification of an existing product’s details.'
      operationId: 'updateProduct'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the product to update'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated product details'
        required: true
        schema:
          type: 'object'
          required:
          - product_name
          - product_description
          - product_main_price
          - product_quantity
          - category_id
          - unit_id
          - product_status
          - track_inventory
          - product_slug
          - product_barcode
          - product_purchase_cost
          - product_available
          - variant_id
          properties:
            product_main_price:
              type: 'number'
              format: 'float'
              example: 199.99
            category_id:
              type: 'string'
              example: 'cat_wearable'
            product_quantity:
              type: 'integer'
              example: 30
            product_status:
              type: 'string'
              enum: [ 'active', 'inactive' ]
              example: 'active'
            product_name:
              type: 'string'
              example: 'Smartwatch Pro'
            track_inventory:
              type: 'boolean'
              example: true
            product_slug:
              type: 'string'
              example: 'smartwatch-pro'
            other:
              type: 'object'
              properties:
                color:
                  type: 'string'
                  example: 'silver'
                water_resistant:
                  type: 'string'
                  example: 'Yes'
                brand:
                  type: 'string'
                  example: 'WearTech'
            cover_url:
              type: 'string'
              example: 'https://example.com/images/smartwatch.jpg'
            product_barcode:
              type: 'string'
              example: '9876543210987'
            product_purchase_cost:
              type: 'number'
              format: 'float'
              example: 120
            product_available:
              type: 'integer'
              example: 28
            unit_id:
              type: 'string'
              example: 'unit_002'
            product_description:
              type: 'string'
              example: 'Advanced smartwatch with fitness tracking and heart rate monitoring.'
            variant_id:
              type: 'string'
              example: 'var_002'
      responses:
        200:
          description: 'Product updated successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product updated successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        404:
          description: 'Product not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Product not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    delete:
      tags:
      - 'product'
      summary: 'Delete a product'
      description: 'Deletes a product from the inventory.'
      operationId: 'deleteProduct'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the product to delete'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Product deleted successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product deleted successfully'
        404:
          description: 'Product not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Product not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /category:
    post:
      tags:
      - 'category'
      summary: 'Create a new category'
      description: 'Adds a new category to the system.'
      operationId: 'createCategory'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Category details to create a new category'
        required: true
        schema:
          type: 'object'
          required:
          - category_id
          - category_name
          - category_description
          - category_status
          properties:
            category_id:
              type: 'string'
              example: 'cat_wearable'
            category_name:
              type: 'string'
              example: 'Wearables'
            category_description:
              type: 'string'
              example: 'Products related to wearable technology.'
            parent_category_id:
              type: 'string'
              nullable: true
              example: null
            category_status:
              type: 'string'
              enum: [ 'active', 'inactive' ]
              example: 'active'
      responses:
        201:
          description: 'Category created successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Category created successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    get:
      tags:
      - 'category'
      summary: 'Get a list of categories'
      description: 'Retrieves a list of all categories in the system.'
      operationId: 'getCategories'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of categories retrieved successfully'
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                category_id:
                  type: 'string'
                  example: 'cat_wearable'
                category_name:
                  type: 'string'
                  example: 'Wearables'
                category_description:
                  type: 'string'
                  example: 'Products related to wearable technology.'
                parent_category_id:
                  type: 'string'
                  nullable: true
                  example: null
                category_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
                  example: 'active'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /category/{id}:
    get:
      tags:
      - 'category'
      summary: 'Get a category by ID'
      description: 'Retrieves a single category’s details by its ID.'
      operationId: 'getCategoryById'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to retrieve'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Category details retrieved successfully'
          schema:
            type: 'object'
            properties:
              category_id:
                type: 'string'
                example: 'cat_wearable'
              category_name:
                type: 'string'
                example: 'Wearables'
              category_description:
                type: 'string'
                example: 'Products related to wearable technology.'
              parent_category_id:
                type: 'string'
                nullable: true
                example: null
              category_status:
                type: 'string'
                enum: [ 'active', 'inactive' ]
                example: 'active'
        404:
          description: 'Category not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Category not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    put:
      tags:
      - 'category'
      summary: 'Update an existing category'
      description: 'Allows modification of an existing category’s details.'
      operationId: 'updateCategory'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to update'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated category details'
        required: true
        schema:
          type: 'object'
          required:
          - category_id
          - category_name
          - category_description
          - category_status
          properties:
            category_id:
              type: 'string'
              example: 'cat_wearable'
            category_name:
              type: 'string'
              example: 'Wearables'
            category_description:
              type: 'string'
              example: 'Products related to wearable technology.'
            parent_category_id:
              type: 'string'
              nullable: true
              example: null
            category_status:
              type: 'string'
              enum: [ 'active', 'inactive' ]
              example: 'active'
      responses:
        200:
          description: 'Category updated successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Category updated successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        404:
          description: 'Category not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Category not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    delete:
      tags:
      - 'category'
      summary: 'Delete a category'
      description: 'Deletes a category from the system.'
      operationId: 'deleteCategory'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to delete'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Category deleted successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Category deleted successfully'
        404:
          description: 'Category not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Category not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /unit:
    post:
      tags:
      - 'unit'
      summary: 'Create a new unit'
      description: 'Adds a new unit to the system.'
      operationId: 'createUnit'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Unit details to create a new unit'
        required: true
        schema:
          type: 'object'
          required:
          - unit_id
          - unit_name
          - unit_description
          - unit_status
          properties:
            unit_id:
              type: 'string'
              example: 'unit_001'
            unit_name:
              type: 'string'
              example: 'Kilogram'
            unit_description:
              type: 'string'
              example: 'Unit of weight used for measuring products'
            unit_status:
              type: 'string'
              enum: [ 'active', 'inactive' ]
              example: 'active'
      responses:
        201:
          description: 'Unit created successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Unit created successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    get:
      tags:
      - 'unit'
      summary: 'Get a list of units'
      description: 'Retrieves a list of all units in the system.'
      operationId: 'getUnits'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of units retrieved successfully'
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                unit_id:
                  type: 'string'
                  example: 'unit_001'
                unit_name:
                  type: 'string'
                  example: 'Kilogram'
                unit_description:
                  type: 'string'
                  example: 'Unit of weight used for measuring products'
                unit_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
                  example: 'active'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /unit/{id}:
    get:
      tags:
      - 'unit'
      summary: 'Get a unit by ID'
      description: 'Retrieves a single unit’s details by its ID.'
      operationId: 'getUnitById'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to retrieve'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Unit details retrieved successfully'
          schema:
            type: 'object'
            properties:
              unit_id:
                type: 'string'
                example: 'unit_001'
              unit_name:
                type: 'string'
                example: 'Kilogram'
              unit_description:
                type: 'string'
                example: 'Unit of weight used for measuring products'
              unit_status:
                type: 'string'
                enum: [ 'active', 'inactive' ]
                example: 'active'
        404:
          description: 'Unit not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Unit not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    put:
      tags:
      - 'unit'
      summary: 'Update an existing unit'
      description: 'Allows modification of an existing unit’s details.'
      operationId: 'updateUnit'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to update'
        required: true
        type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              required:
              - unit_name
              - unit_description
              - unit_status
              properties:
                unit_id:
                  type: 'string'
                  example: 'unit_001'
                unit_name:
                  type: 'string'
                  example: 'Kilogram'
                unit_description:
                  type: 'string'
                  example: 'Unit of weight used for measuring products'
                unit_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
                  example: 'active'
      responses:
        200:
          description: 'Unit updated successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Unit updated successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        404:
          description: 'Unit not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Unit not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    delete:
      tags:
      - 'unit'
      summary: 'Delete a unit'
      description: 'Deletes a unit from the system.'
      operationId: 'deleteUnit'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to delete'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Unit deleted successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Unit deleted successfully'
        404:
          description: 'Unit not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Unit not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'
  /sales:
    post:
      tags:
      - 'sales'
      summary: 'Create a new sale'
      description: 'Creates a new sale with the provided items.'
      operationId: 'createSale'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Sale details to create a new sale'
        required: true
        schema:
          type: 'object'
          required:
          - items
          properties:
            items:
              type: 'array'
              items:
                type: 'object'
                required:
                - product_id
                - quantity_sold
                properties:
                  product_id:
                    type: 'string'
                    example: 'prod123'
                  quantity_sold:
                    type: 'integer'
                    example: 2
      responses:
        201:
          description: 'Sale created successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Sale created successfully'
              sale_id:
                type: 'string'
                example: 'sale123'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    get:
      tags:
      - 'sales'
      summary: 'Get all sales'
      description: 'Retrieves a list of all sales in the system.'
      operationId: 'getAllSales'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of sales retrieved successfully'
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                sale_id:
                  type: 'string'
                  example: 'sale123'
                owner_id:
                  type: 'string'
                  example: 'user123'
                product_id:
                  type: 'string'
                  example: 'prod123'
                quantity_sold:
                  type: 'integer'
                  example: 2
                product:
                type: 'object'
                properties:
                  product_id:
                    type: 'string'
                    example: 'prod123'
                  product_name:
                    type: 'string'
                    example: 'T-Shirt'
                  product_price:
                    type: 'number'
                    example: 25.99
                  product_description:
                    type: 'string'
                    example: 'A comfortable T-Shirt'
                created_at:
                  type: 'string'
                  format: 'date-time'
                  example: '2023-10-01T12:00:00.000Z'
                updated_at:
                  type: 'string'
                  format: 'date-time'
                  example: '2023-10-01T12:00:00.000Z'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /sales/{sale_id}:
    get:
      tags:
      - 'sales'
      summary: 'Get a sale by ID'
      description: 'Retrieves details of a specific sale by its ID.'
      operationId: 'getSalesById'
      parameters:
      - in: 'path'
        name: 'sale_id'
        description: 'ID of the sale to retrieve'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Sale details retrieved successfully'
          schema:
            type: 'object'
            properties:
              sale_id:
                type: 'string'
                example: 'sale123'
              owner_id:
                type: 'string'
                example: 'user123'
              product_id:
                type: 'string'
                example: 'prod123'
              quantity_sold:
                type: 'integer'
                example: 2
              product:
                type: 'object'
                properties:
                  product_id:
                    type: 'string'
                    example: 'prod123'
                  product_name:
                    type: 'string'
                    example: 'T-Shirt'
                  product_price:
                    type: 'number'
                    example: 25.99
                  product_description:
                    type: 'string'
                    example: 'A comfortable T-Shirt'
              created_at:
                type: 'string'
                format: 'date-time'
                example: '2023-10-01T12:00:00.000Z'
              updated_at:
                type: 'string'
                format: 'date-time'
                example: '2023-10-01T12:00:00.000Z'
        404:
          description: 'Sale not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Sale not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    patch:
      tags:
      - 'sales'
      summary: 'Update a sale'
      description: 'Updates an existing sale with the provided details.'
      operationId: 'updateSale'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'sale_id'
        description: 'ID of the sale to update'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Sale details to update'
        required: true
        schema:
          type: 'object'
          required:
          - product_id
          - quantity_sold
          properties:
            product_id:
              type: 'string'
              example: 'prod123'
            quantity_sold:
              type: 'integer'
              example: 3
      responses:
        200:
          description: 'Sale updated successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Sale updated successfully'
        400:
          description: 'Invalid input'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Invalid input provided'
        404:
          description: 'Sale not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Sale not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

    delete:
      tags:
      - 'sales'
      summary: 'Delete a sale'
      description: 'Deletes a sale from the system.'
      operationId: 'deleteSale'
      parameters:
      - in: 'path'
        name: 'sale_id'
        description: 'ID of the sale to delete'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Sale deleted successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Sale deleted successfully'
        404:
          description: 'Sale not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Sale not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

  /sales/{sale_id}/items/{product_id}:
    delete:
      tags:
      - 'sales'
      summary: 'Remove an item from a sale'
      description: 'Removes a specific item from a sale.'
      operationId: 'removeItemFromSale'
      parameters:
      - in: 'path'
        name: 'sale_id'
        description: 'ID of the sale'
        required: true
        type: 'string'
      - in: 'path'
        name: 'product_id'
        description: 'ID of the product to remove'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Item removed from sale successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Item removed from sale successfully'
        404:
          description: 'Sale or item not found'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Sale or item not found'
        500:
          description: 'Internal server error'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: false
              message:
                type: 'string'
                example: 'Internal server error occurred'

definitions:
  UserProfile:
    type: 'object'
    properties:
      id:
        type: 'string'
      preferred_username:
        type: 'string'
      email:
        type: 'string'
      email_verified:
        type: 'boolean'
      phone_number:
        type: 'string'
      phone_number_verified:
        type: 'boolean'
      family_name:
        type: 'string'
      given_name:
        type: 'string'
      name:
        type: 'string'
      nickname:
        type: 'string'
      gender:
        type: 'string'
      birthdate:
        type: 'string'
      address:
        type: 'string'
      locale:
        type: 'string'
      picture:
        type: 'string'
    example:
      id: 'user123'
      preferred_username: 'johndoe'
      email: 'jane.doe@example.com'
      email_verified: true
      phone_number: '+1234567890'
      phone_number_verified: false
      family_name: 'Doe'
      given_name: 'Jane'
      name: 'Jane Doe'
      nickname: 'Janey'
      gender: 'Female'
      birthdate: '1990-01-01'
      address: '123 Main St, Springfield'
      locale: 'en-US'
      picture: 'https://example.com/picture.jpg'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
