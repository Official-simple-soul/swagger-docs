---
swagger: '2.0'
info:
  description: 'This is the API documentation for the SwiftWise Inventory Management System. SwiftWise helps businesses manage their inventory, sales, and profiles efficiently.'
  version: '1.0.0'
  title: 'SwiftWise API'
  termsOfService: 'http://swiftwise.com/terms/'
  contact:
    email: 'support@swiftwise.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'swiftwise.api.com'
basePath: '/v1'
tags:
  - name: 'auth'
    description: 'Endpoints for user authentication and authorization'
  - name: 'inventory'
    description: 'Endpoints for managing inventory items'
  - name: 'sales'
    description: 'Endpoints for managing sales transactions'
  - name: 'user'
    description: 'Endpoints for managing user profiles'
schemes:
  - 'https'
  - 'http'
paths:
  /auth/register:
    post:
      tags:
        - 'auth'
      summary: 'Register a new user'
      description: 'Creates a new user account in the SwiftWise system.'
      operationId: 'registerUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'User registration details'
          required: true
          schema:
            type: 'object'
            properties:
              username:
                type: 'string'
              password:
                type: 'string'
              email:
                type: 'string'
              phone_number:
                type: 'string'
            example:
              username: 'john_doe'
              password: 'Password123!'
              email: 'john@example.com'
              phone_number: '+1234567890'
      responses:
        201:
          description: 'User registered successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'
  /auth/login:
    post:
      tags:
        - 'auth'
      summary: 'User login'
      description: 'Authenticates a user and provides access and refresh tokens.'
      operationId: 'loginUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'User login details'
          required: true
          schema:
            type: 'object'
            properties:
              email:
                type: 'string'
              password:
                type: 'string'
            example:
              email: 'john@example.com'
              password: 'Password123!'
      responses:
        200:
          description: 'Login successful'
          schema:
            type: 'object'
            properties:
              token:
                type: 'string'
              refreshToken:
                type: 'string'
            example:
              token: 'eyJraWQiOiJ...'
              idToken: 'eyJraWQiOiJ...'
              refreshToken: 'eyJraWQiOiJ...'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /auth/logout:
    post:
      tags:
        - 'auth'
      summary: 'Logout user'
      description: 'Logs out an authenticated user by invalidating their session.'
      operationId: 'logoutUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'Authorization'
          in: 'header'
          description: 'Bearer token to invalidate the session.'
          required: true
          type: 'string'
          example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User logged out successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User logged out successfully'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /user/profile:
    get:
      tags:
        - 'user'
      summary: 'Get user profile'
      description: 'Retrieves the profile details of the authenticated user.'
      operationId: 'getUserProfile'
      produces:
        - 'application/json'
      parameters:
        - name: 'Authorization'
          in: 'header'
          description: 'Bearer token'
          required: true
          type: 'string'
      responses:
        200:
          description: 'User profile retrieved successfully'
          schema:
            $ref: '#/definitions/UserProfile'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
definitions:
  UserProfile:
    type: 'object'
    properties:
      id:
        type: 'string'
      username:
        type: 'string'
      email:
        type: 'string'
      phone_number:
        type: 'string'
    example:
      id: 'user123'
      username: 'john_doe'
      email: 'john@example.com'
      phone_number: '+1234567890'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
