---
swagger: '2.0'
info:
  description: 'API documentation for the SwiftWise Inventory Management System.'
  version: '1.0.0'
  title: 'SwiftWise API'
  termsOfService: 'http://swiftwise.com/terms/'
  contact:
    email: 'support@swiftwise.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'z0a6v7mgd2.execute-api.us-west-2.amazonaws.com'
basePath: '/dev'
tags:
- name: 'auth'
  description: 'Endpoints for user authentication and authorization'
- name: 'user'
  description: 'Endpoints for managing user profiles'
schemes:
- 'https'
- 'http'
paths:
  /auth/register:
    post:
      tags:
      - 'auth'
      summary: 'Register a new user'
      description: 'Creates a new user account in the SwiftWise system.'
      operationId: 'registerUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User registration details'
        required: true
        schema:
          type: 'object'
          properties:
            username:
              type: 'string'
            password:
              type: 'string'
            email:
              type: 'string'
            phone_number:
              type: 'string'
          example:
            username: 'john_doe'
            password: 'Password123!'
            email: 'john@example.com'
            phone_number: '+1234567890'
      responses:
        201:
          description: 'User registered successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User registered successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'
  /auth/confirm-email:
    post:
      tags:
      - 'auth'
      summary: 'Confirm email verification'
      description: 'Verifies a user email using the confirmation code sent during registration.'
      operationId: 'confirmEmail'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email confirmation details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            confirmationCode:
              type: 'string'
          example:
            email: 'john@example.com'
            confirmationCode: '123456'
      responses:
        200:
          description: 'Email confirmed successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Email successfully verified'
        400:
          description: 'Invalid confirmation code'
        500:
          description: 'Internal server error'
  /auth/resend-code:
    post:
      tags:
      - 'auth'
      summary: 'Resend confirmation code'
      description: 'Resends a new confirmation code to the user email.'
      operationId: 'resendConfirmationCode'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User email to resend the confirmation code'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
          example:
            email: 'john@example.com'
      responses:
        200:
          description: 'Confirmation code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Confirmation code sent successfully'
        400:
          description: 'Invalid email'
        500:
          description: 'Internal server error'
  /auth/forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Forgot password'
      description: 'Sends a password reset code to the user email.'
      operationId: 'forgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Email to initiate the password reset process'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
          example:
            email: 'john@example.com'
      responses:
        200:
          description: 'Password reset code sent successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset code sent successfully'
        400:
          description: 'Invalid email'
        500:
          description: 'Internal server error'
  /auth/confirm-forgot-password:
    post:
      tags:
      - 'auth'
      summary: 'Confirm password reset'
      description: 'Confirms the password reset using the reset code.'
      operationId: 'confirmForgotPassword'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Password reset confirmation details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            password:
              type: 'string'
            confirmationCode:
              type: 'string'
          example:
            email: 'john@example.com'
            password: 'NewPassword123!'
            confirmationCode: '654321'
      responses:
        200:
          description: 'Password reset successful'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Password reset successful'
        400:
          description: 'Invalid confirmation code or email'
        500:
          description: 'Internal server error'
  /auth/login:
    post:
      tags:
      - 'auth'
      summary: 'User login'
      description: 'Authenticates a user and returns access, ID, and refresh tokens.'
      operationId: 'loginUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'User login details'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            password:
              type: 'string'
          example:
            email: 'john@example.com'
            password: 'Password123!'
      responses:
        200:
          description: 'Login successful'
          schema:
            type: 'object'
            properties:
              token:
                type: 'string'
              refreshToken:
                type: 'string'
            example:
              token: 'eyJraWQiOiJ...'
              refreshToken: 'eyJraWQiOiJ...'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /auth/logout:
    post:
      tags:
      - 'auth'
      summary: 'Logout user'
      description: 'Logs out an authenticated user by invalidating their session.'
      operationId: 'logoutUser'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to invalidate the session.'
        required: true
        type: 'string'
        example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User logged out successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'User logged out successfully'
        401:
          description: 'Unauthorized'
        500:
          description: 'Internal server error'
  /user:
    get:
      tags:
      - 'user'
      summary: 'Get user profile'
      description: 'Retrieves the profile details of the authenticated user.'
      operationId: 'getUserProfile'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to authenticate the request.'
        required: true
        type: 'string'
        example: 'Bearer eyJraWQiOiJ...'
      responses:
        200:
          description: 'User profile retrieved successfully'
          schema:
            $ref: '#/definitions/UserProfile'
        400:
          description: 'Invalid or missing userId'
        401:
          description: 'Unauthorized'
        404:
          description: 'User not found'
        500:
          description: 'Internal server error'

    put:
      tags:
      - 'user'
      summary: 'Update user profile'
      description: 'Allows authenticated users to update their profile details.'
      operationId: 'updateUserProfile'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - name: 'Authorization'
        in: 'header'
        description: 'Bearer token to authenticate the request.'
        required: true
        type: 'string'
        example: 'Bearer eyJraWQiOiJ...'
      - in: 'body'
        name: 'body'
        description: 'Profile attributes to update as key-value pairs'
        required: true
        schema:
          type: 'object'
          properties:
            preferred_username:
              type: 'string'
            email:
              type: 'string'
            email_verified:
              type: 'boolean'
            phone_number:
              type: 'string'
            phone_number_verified:
              type: 'boolean'
            family_name:
              type: 'string'
            given_name:
              type: 'string'
            name:
              type: 'string'
            nickname:
              type: 'string'
            gender:
              type: 'string'
            birthdate:
              type: 'string'
            address:
              type: 'string'
            locale:
              type: 'string'
            picture:
              type: 'string'
          example:
            preferred_username: 'johndoe'
            email: 'jane.doe@example.com'
            email_verified: true
            phone_number: '+1234567890'
            phone_number_verified: false
            family_name: 'Doe'
            given_name: 'Jane'
            name: 'Jane Doe'
            nickname: 'Janey'
            gender: 'Female'
            birthdate: '1990-01-01'
            address: '123 Main St, Springfield'
            locale: 'en-US'
            picture: 'https://example.com/picture.jpg'
  responses:
    200:
      description: 'Profile updated successfully'
      schema:
        type: 'object'
        properties:
          success:
            type: 'boolean'
            example: true
          message:
            type: 'string'
            example: 'Profile updated successfully'
    400:
      description: 'Invalid request data'
    401:
      description: 'Unauthorized'
    404:
      description: 'User not found'
    500:
      description: 'Internal server error'

  /product:
    post:
      tags:
      - 'product'
      summary: 'Create a new product'
      description: 'Adds a new product to the inventory system.'
      operationId: 'createProduct'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'body'
        name: 'body'
        description: 'Product details to create a new product'
        required: true
        schema:
          type: 'object'
          properties:
            name:
              type: 'string'
            description:
              type: 'string'
            price:
              type: 'number'
              format: 'float'
            quantity:
              type: 'integer'
            category_id:
              type: 'string'
            unit_id:
              type: 'string'
          example:
            name: 'Product A'
            description: 'A detailed description of Product A'
            price: 20.99
            quantity: 100
            category_id: 'category123'
            unit_id: 'unit123'
      responses:
        201:
          description: 'Product created successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product created successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'

    get:
      tags:
      - 'product'
      summary: 'Get a list of all products'
      description: 'Retrieves a list of all products in the inventory.'
      operationId: 'getProducts'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of products retrieved successfully'
          schema:
            type: 'array'
            items:
              type: 'object'
              properties:
                id:
                  type: 'string'
                name:
                  type: 'string'
                description:
                  type: 'string'
                price:
                  type: 'number'
                  format: 'float'
                quantity:
                  type: 'integer'
                category_id:
                  type: 'string'
                unit_id:
                  type: 'string'
              example:
                id: 'product123'
                name: 'Product A'
                description: 'A detailed description of Product A'
                price: 20.99
                quantity: 100
                category_id: 'category123'
                unit_id: 'unit123'
        500:
          description: 'Internal server error'

    put:
      tags:
      - 'product'
      summary: 'Update an existing product'
      description: 'Allows modification of an existing product’s details.'
      operationId: 'updateProduct'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the product to update'
        required: true
        type: 'string'
      - in: 'body'
        name: 'body'
        description: 'Updated product details'
        required: true
        schema:
          type: 'object'
          properties:
            name:
              type: 'string'
            description:
              type: 'string'
            price:
              type: 'number'
              format: 'float'
            quantity:
              type: 'integer'
            category_id:
              type: 'string'
            unit_id:
              type: 'string'
          example:
            name: 'Updated Product A'
            description: 'Updated description of Product A'
            price: 25.99
            quantity: 120
            category_id: 'category123'
            unit_id: 'unit123'
      responses:
        200:
          description: 'Product updated successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product updated successfully'
        400:
          description: 'Invalid input'
        404:
          description: 'Product not found'
        500:
          description: 'Internal server error'

    delete:
      tags:
      - 'product'
      summary: 'Delete a product'
      description: 'Deletes a product from the inventory.'
      operationId: 'deleteProduct'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the product to delete'
        required: true
        type: 'string'
      responses:
        200:
          description: 'Product deleted successfully'
          schema:
            type: 'object'
            properties:
              success:
                type: 'boolean'
                example: true
              message:
                type: 'string'
                example: 'Product deleted successfully'
        404:
          description: 'Product not found'
        500:
          description: 'Internal server error'

  /category:
    post:
      tags:
      - 'category'
      summary: 'Create a new category'
      description: 'Adds a new category to the system.'
      operationId: 'createCategory'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                category_id:
                  type: 'string'
                category_name:
                  type: 'string'
                category_description:
                  type: 'string'
                parent_category_id:
                  type: 'string'
                  nullable: true
                category_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
              example:
                category_id: 'cat_wearable'
                category_name: 'Wearables'
                category_description: 'Products related to wearable technology.'
                parent_category_id: null
                category_status: 'active'
      responses:
        201:
          description: 'Category created successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Category created successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'

    get:
      tags:
      - 'category'
      summary: 'Get a list of categories'
      description: 'Retrieves a list of all categories in the system.'
      operationId: 'getCategories'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of categories retrieved successfully'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    category_id:
                      type: 'string'
                    category_name:
                      type: 'string'
                    category_description:
                      type: 'string'
                    parent_category_id:
                      type: 'string'
                      nullable: true
                    category_status:
                      type: 'string'
                      enum: [ 'active', 'inactive' ]
                example:
                - category_id: 'cat_wearable'
                  category_name: 'Wearables'
                  category_description: 'Products related to wearable technology.'
                  parent_category_id: null
                  category_status: 'active'
                - category_id: 'cat_fashion'
                  category_name: 'Fashion'
                  category_description: 'Clothing and accessories.'
                  parent_category_id: null
                  category_status: 'inactive'
        500:
          description: 'Internal server error'

  /category/{id}:
    get:
      tags:
      - 'category'
      summary: 'Get a category by ID'
      description: 'Retrieves a single category’s details by its ID.'
      operationId: 'getCategoryById'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to retrieve'
        required: true
        schema:
          type: 'string'
      responses:
        200:
          description: 'Category details retrieved successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  category_id:
                    type: 'string'
                  category_name:
                    type: 'string'
                  category_description:
                    type: 'string'
                  parent_category_id:
                    type: 'string'
                    nullable: true
                  category_status:
                    type: 'string'
                    enum: [ 'active', 'inactive' ]
                example:
                  category_id: 'cat_wearable'
                  category_name: 'Wearables'
                  category_description: 'Products related to wearable technology.'
                  parent_category_id: null
                  category_status: 'active'
        404:
          description: 'Category not found'
        500:
          description: 'Internal server error'

    put:
      tags:
      - 'category'
      summary: 'Update an existing category'
      description: 'Allows modification of an existing category’s details.'
      operationId: 'updateCategory'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to update'
        required: true
        schema:
          type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                category_id:
                  type: 'string'
                category_name:
                  type: 'string'
                category_description:
                  type: 'string'
                parent_category_id:
                  type: 'string'
                  nullable: true
                category_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
              example:
                category_id: 'cat_wearable'
                category_name: 'Wearables'
                category_description: 'Products related to wearable technology.'
                parent_category_id: null
                category_status: 'active'
      responses:
        200:
          description: 'Category updated successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Category updated successfully'
        400:
          description: 'Invalid input'
        404:
          description: 'Category not found'
        500:
          description: 'Internal server error'

    delete:
      tags:
      - 'category'
      summary: 'Delete a category'
      description: 'Deletes a category from the system.'
      operationId: 'deleteCategory'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the category to delete'
        required: true
        schema:
          type: 'string'
      responses:
        200:
          description: 'Category deleted successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Category deleted successfully'
        404:
          description: 'Category not found'
        500:
          description: 'Internal server error'

  /unit:
    post:
      tags:
      - 'unit'
      summary: 'Create a new unit'
      description: 'Adds a new unit to the system.'
      operationId: 'createUnit'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                unit_id:
                  type: 'string'
                unit_name:
                  type: 'string'
                unit_description:
                  type: 'string'
                unit_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
              example:
                unit_id: 'unit_001'
                unit_name: 'Kilogram'
                unit_description: 'Unit of weight used for measuring products'
                unit_status: 'active'
      responses:
        201:
          description: 'Unit created successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Unit created successfully'
        400:
          description: 'Invalid input'
        500:
          description: 'Internal server error'

    get:
      tags:
      - 'unit'
      summary: 'Get a list of units'
      description: 'Retrieves a list of all units in the system.'
      operationId: 'getUnits'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'List of units retrieved successfully'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'object'
                  properties:
                    unit_id:
                      type: 'string'
                    unit_name:
                      type: 'string'
                    unit_description:
                      type: 'string'
                    unit_status:
                      type: 'string'
                      enum: [ 'active', 'inactive' ]
                example:
                - unit_id: 'unit_001'
                  unit_name: 'Kilogram'
                  unit_description: 'Unit of weight used for measuring products'
                  unit_status: 'active'
                - unit_id: 'unit_002'
                  unit_name: 'Meter'
                  unit_description: 'Unit of length used for measuring products'
                  unit_status: 'inactive'
        500:
          description: 'Internal server error'

  /unit/{id}:
    get:
      tags:
      - 'unit'
      summary: 'Get a unit by ID'
      description: 'Retrieves a single unit’s details by its ID.'
      operationId: 'getUnitById'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to retrieve'
        required: true
        schema:
          type: 'string'
      responses:
        200:
          description: 'Unit details retrieved successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  unit_id:
                    type: 'string'
                  unit_name:
                    type: 'string'
                  unit_description:
                    type: 'string'
                  unit_status:
                    type: 'string'
                    enum: [ 'active', 'inactive' ]
                example:
                  unit_id: 'unit_001'
                  unit_name: 'Kilogram'
                  unit_description: 'Unit of weight used for measuring products'
                  unit_status: 'active'
        404:
          description: 'Unit not found'
        500:
          description: 'Internal server error'

    put:
      tags:
      - 'unit'
      summary: 'Update an existing unit'
      description: 'Allows modification of an existing unit’s details.'
      operationId: 'updateUnit'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to update'
        required: true
        schema:
          type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                unit_id:
                  type: 'string'
                unit_name:
                  type: 'string'
                unit_description:
                  type: 'string'
                unit_status:
                  type: 'string'
                  enum: [ 'active', 'inactive' ]
              example:
                unit_id: 'unit_001'
                unit_name: 'Kilogram'
                unit_description: 'Unit of weight used for measuring products'
                unit_status: 'active'
      responses:
        200:
          description: 'Unit updated successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Unit updated successfully'
        400:
          description: 'Invalid input'
        404:
          description: 'Unit not found'
        500:
          description: 'Internal server error'

    delete:
      tags:
      - 'unit'
      summary: 'Delete a unit'
      description: 'Deletes a unit from the system.'
      operationId: 'deleteUnit'
      parameters:
      - in: 'path'
        name: 'id'
        description: 'ID of the unit to delete'
        required: true
        schema:
          type: 'string'
      responses:
        200:
          description: 'Unit deleted successfully'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
                    example: true
                  message:
                    type: 'string'
                    example: 'Unit deleted successfully'
        404:
          description: 'Unit not found'
        500:
          description: 'Internal server error'
definitions:
  UserProfile:
    type: 'object'
    properties:
      id:
        type: 'string'
      preferred_username:
        type: 'string'
      email:
        type: 'string'
      email_verified:
        type: 'boolean'
      phone_number:
        type: 'string'
      phone_number_verified:
        type: 'boolean'
      family_name:
        type: 'string'
      given_name:
        type: 'string'
      name:
        type: 'string'
      nickname:
        type: 'string'
      gender:
        type: 'string'
      birthdate:
        type: 'string'
      address:
        type: 'string'
      locale:
        type: 'string'
      picture:
        type: 'string'
    example:
      id: 'user123'
      preferred_username: 'johndoe'
      email: 'jane.doe@example.com'
      email_verified: true
      phone_number: '+1234567890'
      phone_number_verified: false
      family_name: 'Doe'
      given_name: 'Jane'
      name: 'Jane Doe'
      nickname: 'Janey'
      gender: 'Female'
      birthdate: '1990-01-01'
      address: '123 Main St, Springfield'
      locale: 'en-US'
      picture: 'https://example.com/picture.jpg'
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
